name: Backend ESLint (controllers & DTOs)

on:
  pull_request:
    paths:
      - 'backend/src/**/*.controller.ts'
      - 'backend/src/**/*.dto.ts'
      - '.github/workflows/backend-lint.yml'

permissions:
  contents: read
  pull-requests: write           # needed to post the comment

jobs:
  lint:
    runs-on: ubuntu-latest
    defaults: { run: { working-directory: backend } }

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Install deps
        run: npm ci --ignore-scripts


      # â”€â”€â”€â”€â”€â”€â”€â”€â”€  Lint & capture output  â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Run ESLint with formatted output
        id: eslint
        shell: bash
        run: |
          set +e

          ESLINT_LOG="../eslint-raw.txt"
          FORMATTED_LOG="../eslint-pretty.txt"
          COMMENT_LOG="../eslint-comment.txt"

          # Run ESLint
          npx eslint "src/**/*.controller.ts" "src/**/*.dto.ts" --max-warnings=0 > "$ESLINT_LOG"
          echo "exit_code=$?" >> "$GITHUB_OUTPUT"

          # Remove final âœ– summary line
          grep -vE '^\s*$|âœ– [0-9]+ problems' "$ESLINT_LOG" \
            | sed 's|/home/runner/work/Clarifieldv2/Clarifieldv2/backend/|./|' \
            > "$FORMATTED_LOG"

          # Count errors
          ERROR_COUNT=$(grep -c 'error' "$FORMATTED_LOG" || true)
          echo "error_count=$ERROR_COUNT" >> "$GITHUB_OUTPUT"

          # Format for comment
          awk '
            BEGIN {
              currentFile = ""
            }
            /^[^[:space:]]/ {
              if (currentFile != "") print ""
              currentFile = $0
              print "### ðŸ“„ **" currentFile "**\n"
            }
            /^[[:space:]]+[0-9]+:/ {
              gsub(/^[[:space:]]+/, "", $0)
              split($0, parts, /[[:space:]]+/)
              line = parts[1]
              msg = substr($0, index($0,$4))
              rule = parts[length(parts)]
              msgWithoutRule = substr(msg, 1, length(msg) - length(rule) - 1)
              print "- **Line " line "** â€” `" msgWithoutRule "`"
            }
          ' "$FORMATTED_LOG" > "$COMMENT_LOG"

          # Export the full report
          if [[ -s "$COMMENT_LOG" ]]; then
            echo 'report<<EOF' >> "$GITHUB_OUTPUT"
            cat "$COMMENT_LOG" >> "$GITHUB_OUTPUT"
            echo 'EOF' >> "$GITHUB_OUTPUT"
          fi


      # â”€â”€â”€â”€â”€â”€â”€â”€â”€  Post (or update) a single comment  â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: PR summary comment
        if: steps.eslint.outputs.report != ''
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ðŸš¨ ${{ steps.eslint.outputs.error_count }} ESLint errors in DTO & Controller files
      
            ${{ steps.eslint.outputs.report }}
      
          edit-mode: replace
    

      # â”€â”€â”€â”€â”€â”€â”€â”€â”€  Fail the job when ESLint found errors  â”€â”€â”€â”€â”€â”€â”€â”€â”€
      - name: Fail if ESLint errored
        if: steps.eslint.outputs.exit_code != '0'
        run: exit 1
